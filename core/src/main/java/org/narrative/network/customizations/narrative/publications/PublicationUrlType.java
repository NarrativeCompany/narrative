package org.narrative.network.customizations.narrative.publications;

import com.google.common.annotations.VisibleForTesting;
import org.narrative.common.util.NameForDisplayProvider;
import org.narrative.common.util.UrlUtil;
import org.narrative.common.util.ValidationHandler;
import org.narrative.common.util.enums.IntegerEnum;
import org.narrative.network.customizations.narrative.service.api.model.PublicationUrls;
import org.narrative.network.customizations.narrative.service.api.model.PublicationUrlsDTO;
import org.narrative.network.customizations.narrative.service.api.model.input.PublicationSettingsInput;
import org.narrative.network.customizations.narrative.service.api.model.input.PublicationUrlsInput;

import java.util.regex.Pattern;

import static org.narrative.common.util.CoreUtils.*;
import static org.narrative.network.shared.util.NetworkCoreUtils.*;

/**
 * Date: 2019-08-23
 * Time: 12:04
 *
 * @author jonmark
 */
public enum PublicationUrlType implements IntegerEnum, NameForDisplayProvider {
    WEBSITE(0, null, null, PublicationUrlsInput.Fields.websiteUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getWebsiteUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.websiteUrl(url);
        }
    },
    TWITTER(1, "https://twitter.com/", "twitter.com", PublicationUrlsInput.Fields.twitterUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getTwitterUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.twitterUrl(url);
        }
    },
    FACEBOOK(2, "https://www.facebook.com/", "facebook.com", PublicationUrlsInput.Fields.facebookUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getFacebookUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.facebookUrl(url);
        }
    },
    INSTAGRAM(3, "https://www.instagram.com/", "instagram.com", PublicationUrlsInput.Fields.instagramUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getInstagramUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.instagramUrl(url);
        }
    },
    YOUTUBE(4, "https://www.youtube.com/", "youtube.com", PublicationUrlsInput.Fields.youtubeUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getYoutubeUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.youtubeUrl(url);
        }
    },
    // jw: the share URL generated by the app is "https://www.snapchat.com/add/" but I am trimming that down to be
    //     a bit more forgiving.
    SNAPCHAT(5, "https://www.snapchat.com/", "snapchat.com", PublicationUrlsInput.Fields.snapchatUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getSnapchatUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.snapchatUrl(url);
        }
    },
    PINTEREST(6, "https://www.pinterest.com/", "pinterest.com", PublicationUrlsInput.Fields.pinterestUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getPinterestUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.pinterestUrl(url);
        }
    },
    LINKED_IN(7, "https://www.linkedin.com/", "linkedin.com", PublicationUrlsInput.Fields.linkedInUrl) {
        public String getUrl(PublicationUrls fields) {
            return fields.getLinkedInUrl();
        }
        public void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url) {
            builder.linkedInUrl(url);
        }
    },
    ;

    private final int id;
    private final String expectedUrlPrefix;
    private final Pattern urlPattern;
    private final String fieldName;

    PublicationUrlType(int id, String expectedUrlPrefix, String domainName, String fieldName) {
        assert !isEmpty(fieldName) : "We should always have a fieldName for validation purposes. type/"+this;

        this.id = id;
        this.expectedUrlPrefix = expectedUrlPrefix;
        this.urlPattern = domainName == null ? null : Pattern.compile("https\\:\\/\\/(www\\.)?" + Pattern.quote(domainName)  + "\\/.+", Pattern.CASE_INSENSITIVE);
        this.fieldName = fieldName;
    }

    @Override
    public int getId() {
        return id;
    }

    @Override
    public String getNameForDisplay() {
        return wordlet("publicationUrlType."+this);
    }

    public void validate(ValidationHandler handler, PublicationSettingsInput input) {
        String url = getUrl(input.getUrls());

        if (isEmpty(url)) {
            return;
        }

        if (!UrlUtil.isUrlValid(url)) {
            handler.addWordletizedFieldError(PublicationSettingsInput.Fields.urls + "." + fieldName, "publicationUrlType.mustBeValidUrl", getNameForDisplay());
            return;
        }

        if (!isDoesUrlMatch(url)) {
            handler.addWordletizedFieldError(PublicationSettingsInput.Fields.urls + "." + fieldName, "publicationUrlType.mustStartWith", getNameForDisplay(), expectedUrlPrefix);
        }
    }

    public boolean isWildcard() {
        // bl: if there is no URL pattern, then it's a wildcard; it'll match any URL
        return urlPattern==null;
    }

    @VisibleForTesting
    public boolean isDoesUrlMatch(String url) {
        return isWildcard() || urlPattern.matcher(url).matches();
    }

    public abstract String getUrl(PublicationUrls fields);

    public abstract void setUrl(PublicationUrlsDTO.PublicationUrlsDTOBuilder builder, String url);
}