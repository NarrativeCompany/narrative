package org.narrative.common.persistence.hibernate;

import org.narrative.common.util.trace.TraceItem;
import org.narrative.common.util.trace.TraceManager;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * Created by IntelliJ IDEA.
 * User: paul
 * Date: Mar 21, 2005
 * Time: 8:04:28 PM
 */
public class GStatement implements Statement {
    private Statement statement;
    protected final boolean trace;

    GStatement(Statement statement) {
        this.statement = statement;
        trace = TraceManager.isTracing();
    }

    public int getFetchDirection() throws SQLException {
        return statement.getFetchDirection();
    }

    public int getFetchSize() throws SQLException {
        return statement.getFetchSize();
    }

    public int getMaxFieldSize() throws SQLException {
        return statement.getMaxFieldSize();
    }

    public int getMaxRows() throws SQLException {
        return statement.getMaxRows();
    }

    public int getQueryTimeout() throws SQLException {
        return statement.getQueryTimeout();
    }

    public int getResultSetConcurrency() throws SQLException {
        return statement.getResultSetConcurrency();
    }

    public int getResultSetHoldability() throws SQLException {
        return statement.getResultSetHoldability();
    }

    public int getResultSetType() throws SQLException {
        return statement.getResultSetType();
    }

    public int getUpdateCount() throws SQLException {
        return statement.getUpdateCount();
    }

    public void cancel() throws SQLException {
        statement.cancel();
    }

    public void clearBatch() throws SQLException {
        statement.clearBatch();
    }

    public void clearWarnings() throws SQLException {
        statement.clearWarnings();
    }

    public void close() throws SQLException {
        statement.close();
    }

    public boolean getMoreResults() throws SQLException {
        return statement.getMoreResults();
    }

    public int[] executeBatch() throws SQLException {
        return statement.executeBatch();
    }

    public void setFetchDirection(int direction) throws SQLException {
        statement.setFetchDirection(direction);
    }

    public void setFetchSize(int rows) throws SQLException {
        statement.setFetchSize(rows);
    }

    public void setMaxFieldSize(int max) throws SQLException {
        statement.setMaxFieldSize(max);
    }

    public void setMaxRows(int max) throws SQLException {
        statement.setMaxRows(max);
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        statement.setQueryTimeout(seconds);
    }

    public boolean getMoreResults(int current) throws SQLException {
        return statement.getMoreResults(current);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        statement.setEscapeProcessing(enable);
    }

    public int executeUpdate(String sql) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.executeUpdate(sql);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public void addBatch(String sql) throws SQLException {

        statement.addBatch(sql);
    }

    public void setCursorName(String name) throws SQLException {
        statement.setCursorName(name);
    }

    public boolean execute(String sql) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.execute(sql);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.executeUpdate(sql, autoGeneratedKeys);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.execute(sql, autoGeneratedKeys);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.executeUpdate(sql, columnIndexes);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.execute(sql, columnIndexes);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public Connection getConnection() throws SQLException {
        return statement.getConnection();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return statement.getGeneratedKeys();
    }

    public ResultSet getResultSet() throws SQLException {
        return statement.getResultSet();
    }

    public SQLWarning getWarnings() throws SQLException {
        return statement.getWarnings();
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.executeUpdate(sql, columnNames);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.execute(sql, columnNames);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }

    }

    public ResultSet executeQuery(String sql) throws SQLException {
        TraceItem traceItem = null;
        if (trace) {
            traceItem = TraceManager.startTrace(new GQueryStats(sql));
        }
        try {
            return statement.executeQuery(sql);
        } finally {
            if (trace) {
                TraceManager.endTrace(traceItem);
            }
        }
    }

    public boolean isClosed() throws SQLException {
        return statement.isClosed();
    }

    public void setPoolable(boolean poolable) throws SQLException {
        statement.setPoolable(poolable);
    }

    public boolean isPoolable() throws SQLException {
        return statement.isPoolable();
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return statement.unwrap(iface);
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return statement.isWrapperFor(iface);
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        statement.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return statement.isCloseOnCompletion();
    }
}
