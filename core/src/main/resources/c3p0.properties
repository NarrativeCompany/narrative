# disable the "VMID" that is automatically appended to the "identity token" used to uniquely identify
# each DataSource for JNDI uniqueness purposes.  we don't use JNDI, so we don't need this.
com.mchange.v2.c3p0.VMID=NONE

# might be nice to use this eventually, but for now, it sounds like this hasn't had quite enough testing
# for it to be considered recommended for production.  it probably will become a default eventually, but i
# thought it may be worthwhile to at least track the fact that this property does exist.
# the purpose of the property is to enable asynchronous acquisition of Connections, which can help improve
# performance when when database acquisition attempts fail (which can happen occasionally).
#com.mchange.v2.resourcepool.experimental.useScatteredAcquireTask=true

# we're setting pretty much all of the DataSource-specific settings programmatically in PartitionConnectionPool.
# to see what other settings are available to be set, see the C3P0Defaults and PoolConfig classes.

# bl: not setting these for now since they can be problematic (closing long-running processes before they finish),
# and there is extra overhead on connection check-outs if we always get a stack trace.  this is warned against
# in c3p0 documentation, as they state that you should only use debugUnreturnedConnectionStackTraces when
# debugging in development environments.
# unreturnedConnectionTimeout defines a limit (in seconds) to how long a Connection may remain checked out.
# If set to a nozero value, unreturned, checked-out Connections that exceed this limit will be summarily destroyed,
# and then replaced in the pool. Obviously, you must take care to set this parameter to a value large enough that
# all intended operations on checked out Connections have time to complete. You can use this parameter to merely
# workaround unreliable client apps that fail to close() Connections.
#c3p0.unreturnedConnectionTimeout=3600
# Much better than working-around is fixing. If, in addition to setting unreturnedConnectionTimeout, you set
# debugUnreturnedConnectionStackTraces to true, then a stack trace will be captured each time a Connection is
# checked-out. Whenever an unreturned Connection times out, that stack trace will be printed, revealing where a
# Connection was checked out that was not checked in promptly. debugUnreturnedConnectionStackTraces  is intended
# to be used only for debugging, as capturing a stack trace can slow down Connection check-out.
#c3p0.debugUnreturnedConnectionStackTraces=true