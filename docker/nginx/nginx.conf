
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  worker_connections  1024;
}


http {

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  client_max_body_size 100M;

  #gzip  on;

  # bl: don't include the default config, as this has configs for localhost, but we want to use our default_server below for localhost
  #include /etc/nginx/conf.d/*.conf;

  # Round robin local application instances.  Change host weight to favor one
  # over the other during round robin
  upstream backend {
    server host.docker.internal:8080 weight=10;
    # Wait 30 seconds to try these servers again after 1 failure within 30 seconds
    server host.docker.internal:8088 weight=10 max_fails=1 fail_timeout=30;
    server host.docker.internal:8089 weight=10 max_fails=1 fail_timeout=30;
  }

  server {
    listen 80 default_server;

    # forward all of the following requests to the java back-end:
    #   - API calls
    #   - legacy static files
    #   - commonDynJscript for includes on legacy pages
    #   - Wait List Pages
    #   - Login page
    #   - 2FA verification
    #   - Control panel pages
    # if you want to test the full Struts UI, uncomment this line instead:
    # note: you will need to comment out the 'location / {' routing for prerender below.
    location / {
    #location ~ ^/(api|webhooks|actuator) {
      # Round robin Tomcat requests to upstream servers list
      proxy_pass http://backend;
      proxy_set_header  Host  $host;
    }

    # bl: we'll just let all other requests fail with a 404. that way, only the requests that will be supported
    # on production will work on development environments.
    # to use the react UI, use port 3000: http://localhost:3000

    # Prerender

    #location / {
    #  try_files $uri @prerender;
    #}

    location @prerender {
      set $prerender "0";
      if ($http_user_agent ~* "Screaming.*|curl.*|googlebot|yahoo|bingbot|baiduspider|yandex|yeti|yodaobot|gigabot|ia_archiver|twitterbot|facebookexternalhit|developers\.google\.com|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
        set $prerender "1";
      }
      if ($args ~ "_escaped_fragment_") {
        set $prerender "1";
      }
      if ($http_user_agent ~ "Prerender") {
        set $prerender "0";
      }
      if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
        set $prerender "0";
      }

      # bl: nginx doesn't support complex conditionals with AND/OR, nor does it support else or nested conditionals
      # so, the only real way to deal with this is to combine values into a string and grep on that string
      # for the various possible permutations. the following URIs are blacklisted for prerender purposes,
      # coinciding with robots.txt. if any of these are requested by a bot, we will return a 401 / Unauthorized
      # since these are all protected routes.
      if ($request_uri ~* "/search.*|/suggest-niche.*|/hq/appeals/my-queue.*|/hq/invoice.*|/member-cp.*|/confirm-email.*|/unsubscribe.*") {
        set $prerender "${prerender}1";
      }

      # the next three conditions are mutually exclusive.

      # the first scenario is if this is a prerender request and it's a URI blacklisted for prerender.
      # this is the 401 / Unauthorized case
      if ($prerender = "11") {
        return 401;
      }

      # the next scenario is a standard prerender scenario. since "11" is handled above, we only need to match
      # here on the exact string literal "1" which indicates it's a prerender request that is not blacklisted.
      if ($prerender = "1") {
        #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
        rewrite .* /$scheme://$host:3000$request_uri? break;
        proxy_pass http://host.docker.internal:1337;
      }

      # the final scenario is if this is not a prerender request. possible values here are "0" and "01". in both
      # cases, we want to just redirect the request to port 3000 (i.e. to the normal, non-prerender backend)
      if ($prerender ~* "0") {
        rewrite .* $scheme://$host:3000$request_uri break;
      }
    }
  }
}